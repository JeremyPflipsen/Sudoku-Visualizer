{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","Menu.js","grids/loadGrid.js","grids/loadSGrid.js","grids/loadRGrid.js","About.js","selectAlg.js","algorithms/backtracking.js","algorithms/visualizeBacktracking.js","algorithms/simulatedAnnealing.js","algorithms/visualizeSimulatedAnnealing.js","algorithms/hillClimbing.js","algorithms/geneticAlgorithm.js","algorithms/visualizeGeneticAlgorithm.js","visualizeAlgorithm.js","Legend.js","Error.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","col","row","isFinish","isStart","actualValue","extraClassName","id","value","type","className","placeholder","onInput","event","inputValueChange","Component","PathfindingVisualizer","grid","nodes","currentRow","currentNode","push","setState","map","rowIdx","node","nodeIdx","selectAlgorithm","document","getElementById","innerHTML","selectAlg","console","log","Menu","href","onClick","handleClick","loadSGrid","loadRGrid","loadGrid","max","GridNum","Math","floor","random","Number","charAt","getRandomInt","checkValue","checkRow","checkCol","squareRow","squareCol","i","j","checkSquare","temp","timesTried","check","About","chooseAbout","bind","alg","selectedAlg","nextEmptySpot","solve","moves","emptySpot","num","backtracking","solvable","removeElement","arrayName","arrayElement","length","splice","fillInZeros","nums","square","sort","pop","pushToScreen","energy","E","seen","includes","getNode2","mutable","row1","row2","col1","col2","move","T","immutableSquares","node2","EC","EN","exp","simulatedAnnealing","count","getImmutableSquares","NodeVal","visualizeSimulatedAnnealing","changeNodeVal","setTimeout","pow","showErrors","randomGrid","tempGrid","error","minimum","array","min","Infinity","geneticAlgorithm","Cpopulation","N","g","fitness","Rpopulation","Npopulation","parent1","parent2","visualizeGeneticAlgorithm","clearErrors","Error","visualizeAlgorithm","solved","visualizeBacktracking","hillClimbing","Legend","message","App","newGrid","slice","target","numVal","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c6ffe210.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { col, row, isFinish, isStart, actualValue } = this.props;\r\n\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : \"\";\r\n    return (\r\n      <input\r\n        id = {`node-${row}-${col}`}\r\n        value = {actualValue}\r\n        type=\"number\"\r\n        className={`node ${extraClassName}`}\r\n        placeholder={actualValue}\r\n        onInput={(event) => this.props.inputValueChange(row,col,event)}\r\n      ></input>\r\n    )\r\n  }\r\n}\r\n\r\nexport const DEFAULT_NODE = {\r\n  row: 0,\r\n  col: 0,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const nodes = [];\r\n    for (let row = 0; row < 9; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 9; col++) {\r\n        const currentNode = {\r\n          col,\r\n          row,\r\n          isStart: false,\r\n          isFinish: false,\r\n        };\r\n        currentRow.push(currentNode);\r\n      }\r\n      nodes.push(currentRow);\r\n    }\r\n    this.setState({\r\n      grid: nodes\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <>\r\n        <div className = 'grid'>\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { col, row, isStart, isFinish} = node;\r\n                  return (\r\n                    <Node \r\n                      key = {nodeIdx}\r\n                      col = {col}\r\n                      row = {row}\r\n                      isStart = {isStart}\r\n                      isFinish={isFinish}\r\n                      actualValue={this.props.grid[row][col]}\r\n                      inputValueChange={this.props.inputValueChange}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>);\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport \"./Menu.sass\"\r\n\r\nfunction selectAlgorithm(props, value) {\r\n  switch (value) {\r\n    case 1:\r\n      document.getElementById(\"button\").innerHTML = \"Visualize Backtracking\"\r\n      props.selectAlg(1)\r\n      break\r\n\r\n    case 2:\r\n      document.getElementById(\"button\").innerHTML = \"Visualize Hill Climbing\"\r\n      props.selectAlg(2)\r\n      break\r\n\r\n    case 3:\r\n      document.getElementById(\"button\").innerHTML =\r\n        \"Visualize Simulated Annealing\"\r\n      props.selectAlg(3)\r\n      break\r\n\r\n    case 4:\r\n      document.getElementById(\"button\").innerHTML =\r\n        \"Visualize Genetic Algorithm\"\r\n      props.selectAlg(4)\r\n      break\r\n\r\n    default:\r\n      console.log(\"You selected an algorithm!\")\r\n      break\r\n  }\r\n}\r\n\r\nexport default function Menu(props) {\r\n  return (\r\n    <nav className=\"menu\">\r\n      <ol>\r\n        <li className=\"menu-item\">\r\n          <a href=\"#0\">Algorithm</a>\r\n          <ol className=\"sub-menu\">\r\n            <li className=\"menu-item\" onClick={() => selectAlgorithm(props, 1)}>\r\n              <a href=\"#0\">Backtracking</a>\r\n            </li>\r\n            <li className=\"menu-item\" onClick={() => selectAlgorithm(props, 2)}>\r\n              <a href=\"#0\">Hill Climbing</a>\r\n            </li>\r\n            <li className=\"menu-item\" onClick={() => selectAlgorithm(props, 3)}>\r\n              <a href=\"#0\">Simulated Annealing</a>\r\n            </li>\r\n            <li className=\"menu-item\" onClick={() => selectAlgorithm(props, 4)}>\r\n              <a href=\"#0\">Genetic Algorithm</a>\r\n            </li>\r\n          </ol>\r\n        </li>\r\n        <button\r\n          id=\"button\"\r\n          onClick={props.handleClick}\r\n          href=\"#\"\r\n          className=\"myButton\"\r\n        >\r\n          Visualize Algorithm\r\n        </button>\r\n        <li className=\"menu-item\">\r\n          <a href=\"#0\">Load Grid</a>\r\n          <ol className=\"sub-menu\">\r\n            <li className=\"menu-item\" onClick={props.loadSGrid}>\r\n              <a href=\"#0\">Grid with Solution</a>\r\n            </li>\r\n            <li className=\"menu-item\" onClick={props.loadRGrid}>\r\n              <a href=\"#0\">Load Random Grid</a>\r\n            </li>\r\n          </ol>\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n  )\r\n}\r\n","function Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n  } // Gets a node from the screen\r\n\r\n  export default function loadGrid (grid) {\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n            Node(row,col).className = 'node'\r\n        }\r\n    }\r\n}","function getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport default function loadSGrid () {\r\n\r\n    /*dimitri\r\n    /\r\n    sudoku\r\n    73930\r\n    \r\n    sudoku/sudoku.txt\r\n    @dimitri\r\n    dimitri Clean and naive Common Lisp implementation of http://norvig.com/sudok…\r\n    …\r\n    Latest commit b417c3e on Jul 8, 2012\r\n     History\r\n     1 contributor\r\n    500 lines (500 sloc)  5.27 KB*/\r\n    const grids = `\r\n    Grid 01\r\n    003020600\r\n    900305001\r\n    001806400\r\n    008102900\r\n    700000008\r\n    006708200\r\n    002609500\r\n    800203009\r\n    005010300\r\n    Grid 02\r\n    200080300\r\n    060070084\r\n    030500209\r\n    000105408\r\n    000000000\r\n    402706000\r\n    301007040\r\n    720040060\r\n    004010003\r\n    Grid 03\r\n    000000907\r\n    000420180\r\n    000705026\r\n    100904000\r\n    050000040\r\n    000507009\r\n    920108000\r\n    034059000\r\n    507000000\r\n    Grid 04\r\n    030050040\r\n    008010500\r\n    460000012\r\n    070502080\r\n    000603000\r\n    040109030\r\n    250000098\r\n    001020600\r\n    080060020\r\n    Grid 05\r\n    020810740\r\n    700003100\r\n    090002805\r\n    009040087\r\n    400208003\r\n    160030200\r\n    302700060\r\n    005600008\r\n    076051090\r\n    Grid 06\r\n    100920000\r\n    524010000\r\n    000000070\r\n    050008102\r\n    000000000\r\n    402700090\r\n    060000000\r\n    000030945\r\n    000071006\r\n    Grid 07\r\n    043080250\r\n    600000000\r\n    000001094\r\n    900004070\r\n    000608000\r\n    010200003\r\n    820500000\r\n    000000005\r\n    034090710\r\n    Grid 08\r\n    480006902\r\n    002008001\r\n    900370060\r\n    840010200\r\n    003704100\r\n    001060049\r\n    020085007\r\n    700900600\r\n    609200018\r\n    Grid 09\r\n    000900002\r\n    050123400\r\n    030000160\r\n    908000000\r\n    070000090\r\n    000000205\r\n    091000050\r\n    007439020\r\n    400007000\r\n    Grid 10\r\n    001900003\r\n    900700160\r\n    030005007\r\n    050000009\r\n    004302600\r\n    200000070\r\n    600100030\r\n    042007006\r\n    500006800\r\n    Grid 11\r\n    000125400\r\n    008400000\r\n    420800000\r\n    030000095\r\n    060902010\r\n    510000060\r\n    000003049\r\n    000007200\r\n    001298000\r\n    Grid 12\r\n    062340750\r\n    100005600\r\n    570000040\r\n    000094800\r\n    400000006\r\n    005830000\r\n    030000091\r\n    006400007\r\n    059083260\r\n    Grid 13\r\n    300000000\r\n    005009000\r\n    200504000\r\n    020000700\r\n    160000058\r\n    704310600\r\n    000890100\r\n    000067080\r\n    000005437\r\n    Grid 14\r\n    630000000\r\n    000500008\r\n    005674000\r\n    000020000\r\n    003401020\r\n    000000345\r\n    000007004\r\n    080300902\r\n    947100080\r\n    Grid 15\r\n    000020040\r\n    008035000\r\n    000070602\r\n    031046970\r\n    200000000\r\n    000501203\r\n    049000730\r\n    000000010\r\n    800004000\r\n    Grid 16\r\n    361025900\r\n    080960010\r\n    400000057\r\n    008000471\r\n    000603000\r\n    259000800\r\n    740000005\r\n    020018060\r\n    005470329\r\n    Grid 17\r\n    050807020\r\n    600010090\r\n    702540006\r\n    070020301\r\n    504000908\r\n    103080070\r\n    900076205\r\n    060090003\r\n    080103040\r\n    Grid 18\r\n    080005000\r\n    000003457\r\n    000070809\r\n    060400903\r\n    007010500\r\n    408007020\r\n    901020000\r\n    842300000\r\n    000100080\r\n    Grid 19\r\n    003502900\r\n    000040000\r\n    106000305\r\n    900251008\r\n    070408030\r\n    800763001\r\n    308000104\r\n    000020000\r\n    005104800\r\n    Grid 20\r\n    000000000\r\n    009805100\r\n    051907420\r\n    290401065\r\n    000000000\r\n    140508093\r\n    026709580\r\n    005103600\r\n    000000000\r\n    Grid 21\r\n    020030090\r\n    000907000\r\n    900208005\r\n    004806500\r\n    607000208\r\n    003102900\r\n    800605007\r\n    000309000\r\n    030020050\r\n    Grid 22\r\n    005000006\r\n    070009020\r\n    000500107\r\n    804150000\r\n    000803000\r\n    000092805\r\n    907006000\r\n    030400010\r\n    200000600\r\n    Grid 23\r\n    040000050\r\n    001943600\r\n    009000300\r\n    600050002\r\n    103000506\r\n    800020007\r\n    005000200\r\n    002436700\r\n    030000040\r\n    Grid 24\r\n    004000000\r\n    000030002\r\n    390700080\r\n    400009001\r\n    209801307\r\n    600200008\r\n    010008053\r\n    900040000\r\n    000000800\r\n    Grid 25\r\n    360020089\r\n    000361000\r\n    000000000\r\n    803000602\r\n    400603007\r\n    607000108\r\n    000000000\r\n    000418000\r\n    970030014\r\n    Grid 26\r\n    500400060\r\n    009000800\r\n    640020000\r\n    000001008\r\n    208000501\r\n    700500000\r\n    000090084\r\n    003000600\r\n    060003002\r\n    Grid 27\r\n    007256400\r\n    400000005\r\n    010030060\r\n    000508000\r\n    008060200\r\n    000107000\r\n    030070090\r\n    200000004\r\n    006312700\r\n    Grid 28\r\n    000000000\r\n    079050180\r\n    800000007\r\n    007306800\r\n    450708096\r\n    003502700\r\n    700000005\r\n    016030420\r\n    000000000\r\n    Grid 29\r\n    030000080\r\n    009000500\r\n    007509200\r\n    700105008\r\n    020090030\r\n    900402001\r\n    004207100\r\n    002000800\r\n    070000090\r\n    Grid 30\r\n    200170603\r\n    050000100\r\n    000006079\r\n    000040700\r\n    000801000\r\n    009050000\r\n    310400000\r\n    005000060\r\n    906037002\r\n    Grid 31\r\n    000000080\r\n    800701040\r\n    040020030\r\n    374000900\r\n    000030000\r\n    005000321\r\n    010060050\r\n    050802006\r\n    080000000\r\n    Grid 32\r\n    000000085\r\n    000210009\r\n    960080100\r\n    500800016\r\n    000000000\r\n    890006007\r\n    009070052\r\n    300054000\r\n    480000000\r\n    Grid 33\r\n    608070502\r\n    050608070\r\n    002000300\r\n    500090006\r\n    040302050\r\n    800050003\r\n    005000200\r\n    010704090\r\n    409060701\r\n    Grid 34\r\n    050010040\r\n    107000602\r\n    000905000\r\n    208030501\r\n    040070020\r\n    901080406\r\n    000401000\r\n    304000709\r\n    020060010\r\n    Grid 35\r\n    053000790\r\n    009753400\r\n    100000002\r\n    090080010\r\n    000907000\r\n    080030070\r\n    500000003\r\n    007641200\r\n    061000940\r\n    Grid 36\r\n    006080300\r\n    049070250\r\n    000405000\r\n    600317004\r\n    007000800\r\n    100826009\r\n    000702000\r\n    075040190\r\n    003090600\r\n    Grid 37\r\n    005080700\r\n    700204005\r\n    320000084\r\n    060105040\r\n    008000500\r\n    070803010\r\n    450000091\r\n    600508007\r\n    003010600\r\n    Grid 38\r\n    000900800\r\n    128006400\r\n    070800060\r\n    800430007\r\n    500000009\r\n    600079008\r\n    090004010\r\n    003600284\r\n    001007000\r\n    Grid 39\r\n    000080000\r\n    270000054\r\n    095000810\r\n    009806400\r\n    020403060\r\n    006905100\r\n    017000620\r\n    460000038\r\n    000090000\r\n    Grid 40\r\n    000602000\r\n    400050001\r\n    085010620\r\n    038206710\r\n    000000000\r\n    019407350\r\n    026040530\r\n    900020007\r\n    000809000\r\n    Grid 41\r\n    000900002\r\n    050123400\r\n    030000160\r\n    908000000\r\n    070000090\r\n    000000205\r\n    091000050\r\n    007439020\r\n    400007000\r\n    Grid 42\r\n    380000000\r\n    000400785\r\n    009020300\r\n    060090000\r\n    800302009\r\n    000040070\r\n    001070500\r\n    495006000\r\n    000000092\r\n    Grid 43\r\n    000158000\r\n    002060800\r\n    030000040\r\n    027030510\r\n    000000000\r\n    046080790\r\n    050000080\r\n    004070100\r\n    000325000\r\n    Grid 44\r\n    010500200\r\n    900001000\r\n    002008030\r\n    500030007\r\n    008000500\r\n    600080004\r\n    040100700\r\n    000700006\r\n    003004050\r\n    Grid 45\r\n    080000040\r\n    000469000\r\n    400000007\r\n    005904600\r\n    070608030\r\n    008502100\r\n    900000005\r\n    000781000\r\n    060000010\r\n    Grid 46\r\n    904200007\r\n    010000000\r\n    000706500\r\n    000800090\r\n    020904060\r\n    040002000\r\n    001607000\r\n    000000030\r\n    300005702\r\n    Grid 47\r\n    000700800\r\n    006000031\r\n    040002000\r\n    024070000\r\n    010030080\r\n    000060290\r\n    000800070\r\n    860000500\r\n    002006000\r\n    Grid 48\r\n    001007090\r\n    590080001\r\n    030000080\r\n    000005800\r\n    050060020\r\n    004100000\r\n    080000030\r\n    100020079\r\n    020700400\r\n    Grid 49\r\n    000003017\r\n    015009008\r\n    060000000\r\n    100007000\r\n    009000200\r\n    000500004\r\n    000000020\r\n    500600340\r\n    340200000\r\n    Grid 50\r\n    300200000\r\n    000107000\r\n    706030500\r\n    070009080\r\n    900020004\r\n    010800050\r\n    009040301\r\n    000702000\r\n    000008006\r\n    `\r\n    \r\n    let grid = [\r\n        [0, 5, 1, 3, 6, 2, 7, 0, 0],\r\n        [0, 4, 0, 0, 5, 8, 0, 0, 0],\r\n        [0, 0, 0, 4, 0, 0, 0, 2, 5],\r\n        [0, 8, 0, 0, 0, 0, 9, 0, 3],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [7, 0, 5, 0, 0, 0, 0, 8, 0],\r\n        [1, 2, 0, 0, 0, 9, 0, 0, 0],\r\n        [0, 0, 0, 2, 8, 0, 0, 6, 0],\r\n        [0, 0, 8, 5, 3, 4, 2, 9, 0]\r\n    ]\r\n\r\n    let GridNum = getRandomInt(50) + 1\r\n\r\n    for (let row = 0; row < 9; row ++){\r\n        for ( let col = 0; col < 9; col ++){\r\n            grid[row][col] = Number(grids.charAt(17+(GridNum-1)*138 + 9*row + 5*row + col))\r\n        }\r\n    }\r\n\r\n    return grid\r\n}","function getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nfunction checkRow(grid, row, value) {\r\n    for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === value) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkCol(grid, col, value) {\r\n    for (let row = 0; row < 9; row++) {\r\n        if (grid[row][col] === value) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkSquare(grid, row, col,value) {\r\n    let squareRow = Math.floor(row/3)*3\r\n    let squareCol = Math.floor(col/3)*3\r\n\r\n    for (let i = 0; i<3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (grid[squareRow + i][squareCol + j] === value)\r\n                return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkValue(grid, row, col, value) {\r\n    if (checkRow(grid, row, value) &&\r\n        checkCol(grid, col,value) &&\r\n        checkSquare(grid, row,col,value)) {\r\n            return true\r\n        }\r\n        return false\r\n}\r\n\r\nexport default function loadRGrid() {\r\n    let grid = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n\r\n    for (let row=0; row < 9; row ++) {\r\n        for (let col=0; col< 9; col++) {\r\n          if (Math.random() > 0.7) {\r\n            let temp = getRandomInt(9) +1\r\n\r\n            let timesTried = 0\r\n            let check = checkValue(grid,row,col,temp)\r\n            while(!check && timesTried < 50) {\r\n                // console.log(grid[row][col])\r\n                temp = getRandomInt(8)+1\r\n                check = checkValue(grid,row,col,temp)\r\n                timesTried++\r\n            }\r\n            grid[row][col] = temp\r\n          }\r\n\r\n        }\r\n    }\r\n\r\n    return grid\r\n}","import React, { Component } from \"react\";\r\nimport './About.css'\r\n\r\nexport default class About extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n        this.chooseAbout = this.chooseAbout.bind(this)\r\n      }\r\n\r\n    chooseAbout(alg) {\r\n        switch (alg) {\r\n            case 1:\r\n                return (\r\n                    <div>\r\n                    Backtracking is essentially structured guessing until you find \r\n                    a solution that works.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 1: Choose 1x1 Square\r\n                    <br></br>\r\n                    Here we choose the top-left-most 1x1 square whose value is 0.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 2: Choose Number\r\n                    <br></br>\r\n                    A conflict is when a the number in a 1x1 square already appears\r\n                    in the same row, column, or 3x3 square. Choose the lowest number\r\n                    1-9 that doesn't cause a conflict and put it in the current chosen\r\n                    square. If all of the numbers 1-9 cause conflicts in the current square\r\n                    then go to step 3. Otherwise skip step 3 and go to step 4.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 3: Backtrack\r\n                    <br></br>\r\n                    Back up to the previous chosen square. Chose the lowest number that\r\n                    is greater than what was previously in that square. So if the previous \r\n                    chosen square had a 4, now start checking the numbers 5-9. If these all\r\n                    cause conflicts, then repeat step 3 again.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 4: Repeat\r\n                    <br></br>\r\n                    Start again at step 1 until you've filled in all the squares. If there\r\n                    is no solution then reset all the squares back to 0.\r\n                    </div>\r\n                    )\r\n            \r\n            case 2: \r\n                return (\r\n                    <div>\r\n                    Hill Climbing is an example of a greedy algorithm, meaning that\r\n                    at each step in the algorithm, it chooses the option that maximizes\r\n                    its short-term gain to the next step. \r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 1: Initialize\r\n                    <br></br>\r\n                    Fill all of the 3x3 squares with the numbers 1-9  in a random\r\n                    arrangement so that there are no duplicates in the 3x3 squares.\r\n                    There will be conflicts in the rows and columns.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 2: Count Error\r\n                    <br></br>\r\n                    For each conflict in the grid, increase the total Error.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 3: Switch Squares\r\n                    <br></br>\r\n                    Choose two random 1x1 squares in the same 3x3 square. If switching\r\n                    their numbers lowers the total Error in the grid, then make the\r\n                    switch. Otherwise do not.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 4: Repeat\r\n                    <br></br>\r\n                    Repeat steps 2 and 3 a lot of times or until the error becomes 0.\r\n                    <br></br>\r\n                    <br></br>\r\n\r\n                    This implementation looks at around 50000 moves, but quickly reaches a point\r\n                    where there aren't any moves that will lower the error, even though\r\n                    the grid is not solved. This is called a \"local minimum\" in the error,\r\n                    but it is not the \"absolute minimum\" of 0 error that we want. To get\r\n                    unstuck from this local minimum, we need to allow the error to increase\r\n                    sometimes, like in Simulated Annealing.\r\n                    </div>\r\n                )\r\n\r\n            case 3: \r\n                return (\r\n                    <div>\r\n                        Simulated Annealing is based on how molten metals cool into solid\r\n                    form.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 1: Initialize\r\n                    <br></br>\r\n                    Fill all of the 3x3 squares with the numbers 1-9  in a random\r\n                    arrangement so that there are no duplicates in the 3x3 squares.\r\n                    There will be conflicts in the rows and columns.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 2: Count Error\r\n                    <br></br>\r\n                    For each conflict in the grid, increase the total Error.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 3: Switch Squares\r\n                    <br></br>\r\n                    Choose two random 1x1 squares in the same 3x3 square. If switching\r\n                    their numbers lowers the total Error in the grid, then make the\r\n                    switch. If swithing their numbers increases the total Error, then\r\n                    there is a chance to make the switch. At the beginning this chance\r\n                    is around 80% but it drops over time to around 0% at the end.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Step 4: Repeat\r\n                    <br></br>\r\n                    Repeat steps 2 and 3 a lot of times or until the error becomes 0.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Simulated Annealing is much like Hill Climbing, but it\r\n                    allows the board to change a lot more at the beginning and \"cool\"\r\n                    into a solution with less errors. This helps the algorithm break\r\n                    out of local minima in the error that Hill Climbing gets stuck\r\n                    at. If you run both of these a few times, you'll see that Hill\r\n                    Climbing usually ends with around 10 errors, but Simulated\r\n                    Annealing usually ends with 2 or 3, which is much better.\r\n                    </div>\r\n                )\r\n\r\n            case 4:\r\n                return (\r\n                    <div>\r\n                        The genetic algorithm replicates natural selection in organisms.\r\n                        <br></br>\r\n                        <br></br>\r\n                        Step 1: Initialize\r\n                        <br></br>\r\n                        Duplicate the initial board 1000 times and randomly set the 0s\r\n                        to be any number 1-9. This is our initial population.\r\n                        <br></br>\r\n                        <br></br>\r\n                        Step 2: Reproduction\r\n                        <br></br>\r\n                        Choose two \"parent\" boards from the current population. Boards with\r\n                        lower errors get chosen to be parents more often. This reflects natural \r\n                        selection choosing more fit individuals to reproduce more.\r\n                        Create a new \"child\" board by randomly mixing the values of the two parents. \r\n                        This new board becomes a member of the child population. Make \r\n                        1000 children in this way.\r\n                        <br></br>\r\n                        <br></br>\r\n                        Step 3: Mutation\r\n                        <br></br>\r\n                        In each child, there is a small chance that any of its values will\r\n                        randomly change to a different value. This reflects gene mutation\r\n                        in organisms.\r\n                        <br></br>\r\n                        <br></br>\r\n                        Step 4: Repeat\r\n                        <br></br>\r\n                        The child population becomes the new parent population. Then repeat Steps 2 and 3.\r\n                        In our implementation we make 1000 generations.\r\n                        <br></br>\r\n                        <br></br>\r\n                        While there are 1000 boards in each generation, I am only showing you one\r\n                        board per generation.\r\n                    </div>\r\n                )\r\n            \r\n            default:\r\n                return \"Choose an algorithm!\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <span className='About'>{this.chooseAbout(this.props.selectedAlg)}</span>\r\n        )\r\n    }\r\n}","//This function is bound to the App class in App.js\r\n//so that App may pass it onto other components\r\n//and those components may change app's state\r\n\r\nexport default function selectAlg(value) {\r\n    switch(value) {\r\n      case value:\r\n        this.setState({selectedAlg: value})\r\n        break\r\n      \r\n      default:\r\n        console.log(\"You selected an algorithm!\")\r\n        break\r\n    }\r\n  }","function checkRow(grid, row, value) {\r\n    for (let col = 0; col < 9; col++) {\r\n        if (grid[row][col] === value) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkCol(grid, col, value) {\r\n    for (let row = 0; row < 9; row++) {\r\n        if (grid[row][col] === value) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkSquare(grid, row, col,value) {\r\n    let squareRow = Math.floor(row/3)*3\r\n    let squareCol = Math.floor(col/3)*3\r\n\r\n    for (let i = 0; i<3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (grid[squareRow + i][squareCol + j] === value)\r\n                return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction checkValue(grid, row, col, value) {\r\n    if (checkRow(grid, row, value) &&\r\n        checkCol(grid, col,value) &&\r\n        checkSquare(grid, row,col,value)) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\nfunction nextEmptySpot(grid ) {\r\n    for (var row = 0; row < 9; row++){\r\n        for (var col = 0; col <9; col++){\r\n            if (grid[row][col] === 0 || grid[row][col] === '0') {\r\n                return [row,col]\r\n            }\r\n        }\r\n    }\r\n    return [-1,-1]\r\n}\r\n\r\nfunction solve(grid,moves) {\r\n    //find the next empty spot to look at\r\n    let emptySpot = nextEmptySpot(grid)\r\n    let row = emptySpot[0]\r\n    let col = emptySpot[1]\r\n\r\n    //check if there are no more empty spots\r\n    if (row === -1) {\r\n        return\r\n    }\r\n\r\n    //if the current node can change, do so and recursively call solve again\r\n    for (let num = 1; num <=9; num++) {\r\n        if (checkValue(grid, row,col,num)){\r\n            grid[row][col] = num\r\n            moves.push([row,col,num])\r\n            solve(grid,moves)\r\n        }\r\n    \r\n        //if the current node can't change but there are other empty spots then we need to back up\r\n        if(nextEmptySpot(grid)[0] !== -1) {\r\n            grid[row][col] = 0\r\n            moves.push([row,col,0])\r\n            }\r\n    }\r\n}\r\n\r\nexport default function backtracking(grid) {\r\n\r\n    let moves = []\r\n\r\n    //check if the initial board state is solvable\r\n    for (let row =0; row < 9; row ++) {\r\n        for (let col=0; col < 9; col++){\r\n            if (grid[row][col] !== 0 && grid[row][col] !== '0'){\r\n                //remove value so that checkValue doesn't count the current square and thus always return false\r\n                let temp = grid[row][col]\r\n                grid[row][col] = 0\r\n\r\n                if (!checkValue(grid,row,col,temp)){\r\n                    return {moves: [],solvable: false}\r\n                }\r\n\r\n                grid[row][col] = temp\r\n            }\r\n        }\r\n    }\r\n\r\n    //call main solve function that does all the work\r\n    solve(grid,moves)\r\n\r\n    return {moves: moves,solvable: true}\r\n}","function Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nexport default function visualizeBacktracking(moves,solvable) {\r\n    //If the original grid isn't solvable then tell the user and return\r\n    if (!solvable) {\r\n        document.getElementById('Error').innerHTML = 'Duplicate detected. Grid has no solution.'\r\n        return\r\n    }\r\n    else {\r\n        document.getElementById('Error').innerHTML = ''\r\n    }\r\n\r\n    //Show all the moves\r\n    for (let i = 0; i < moves.length; i++) {\r\n    \r\n        setTimeout(() => {\r\n            Node(moves[i][0],moves[i][1]).className = 'node-start' //color node about to be changed\r\n        }, 5000*Math.pow(i,0.25)-5000)\r\n        setTimeout(() => {\r\n            Node(moves[i][0],moves[i][1]).value = moves[i][2]\r\n            if (moves[i][2] === 0){\r\n                Node(moves[i][0],moves[i][1]).className = 'node' //color visited nodes\r\n            }\r\n            else {\r\n                Node(moves[i][0],moves[i][1]).className = 'node-finish' //color visited nodes\r\n            }\r\n        }, 5000*Math.pow(i+1,0.25)-5000)\r\n    }\r\n\r\n    //check if grid has been solved\r\n    setTimeout(() => {\r\n        let solved = true\r\n        for (let row = 0; row < 9; row++) {\r\n            for (let col = 0; col < 9; col ++){\r\n                console.log(Node(row,col).value)\r\n                if (Node(row,col).value === '0') {\r\n                    document.getElementById('Error').innerHTML = 'Grid does not have a solution :('\r\n                    solved = false\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        if (solved){\r\n            document.getElementById('Error').innerHTML = 'Grid Solved. Boom.'\r\n        }\r\n    }, 5000*Math.pow(moves.length+1,0.25)-5000)\r\n}","\r\n\r\nfunction Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction pushToScreen(grid) {\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n}\r\n\r\nfunction shuffle(array) {\r\n    array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  function removeElement(arrayName,arrayElement)\r\n {\r\n    for (var j = 0; j < arrayName.length; j++) {\r\n        for(var i=0; i<arrayName.length;i++ )\r\n        { \r\n            if(arrayName[i]===arrayElement)\r\n                arrayName.splice(i,1); \r\n        }\r\n    }\r\n  }\r\n\r\n//Fills in grid by rows\r\n// function fillInZeros(grid) {\r\n//     let nums= [1,2,3,4,5,6,7,8,9]\r\n\r\n//     for(let row = 0; row < 9; row++) {\r\n//         for (let col = 0; col < 9; col ++){\r\n//             if (grid[row][col] !== 0) {\r\n//                 nums[grid[row][col] - 1] = 0\r\n//             }\r\n//         }\r\n//         console.log(nums)\r\n//         removeElement(nums,0)\r\n//         console.log(nums)\r\n//         shuffle(nums)\r\n//         for (let col = 0; col < 9; col ++){\r\n//             if (grid[row][col] === 0) {\r\n//                 grid[row][col] = nums.pop()\r\n//             }\r\n//         }\r\n//         nums= [1,2,3,4,5,6,7,8,9]\r\n//     }\r\n// }\r\n\r\n//fills in grid by squares\r\nfunction fillInZeros(grid) {\r\n    let nums= [1,2,3,4,5,6,7,8,9]\r\n    let squareRow = 0\r\n    let squareCol = 0\r\n\r\n    for (let square = 0; square < 9; square++) {\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (grid[row][col] !== 0) {\r\n                    nums[grid[row][col] - 1] = 0\r\n                }\r\n            }\r\n        }\r\n        removeElement(nums,0)\r\n        shuffle(nums)\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (grid[row][col] === 0) {\r\n                    grid[row][col] = nums.pop()\r\n                }\r\n            }\r\n        }\r\n        nums= [1,2,3,4,5,6,7,8,9]\r\n        if (squareCol !== 6) {\r\n            squareCol = squareCol + 3\r\n        }\r\n        else {\r\n            squareCol = 0\r\n            squareRow = squareRow + 3\r\n        }\r\n    }\r\n\r\n    pushToScreen(grid)\r\n}\r\n\r\nfunction energy(grid) {\r\n    let E = 0\r\n    let seen = []\r\n\r\n    //check the rows\r\n    for (let row = 0; row < 9; row ++) {\r\n        for (let col = 0; col < 9; col ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                E = E + 1\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    //check the columns\r\n    for (let col = 0; col < 9; col ++) {\r\n        for (let row = 0; row < 9; row ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                E = E + 1\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n\r\n    return E\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nfunction getImmutableSquares(mutable) {\r\n    let count = 0\r\n    let immutableSquares = []\r\n    let squareRow = 0\r\n    let squareCol = 0\r\n\r\n    for (let square = 0; square < 9; square++) {\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (!mutable[row][col]){\r\n                    count++\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (count >= 8) {\r\n            immutableSquares.push([squareRow,squareCol])\r\n        }\r\n\r\n        count = 0\r\n\r\n        if (squareCol !== 6) {\r\n            squareCol = squareCol + 3\r\n        }\r\n        else {\r\n            squareCol = 0\r\n            squareRow = squareRow + 3\r\n        }\r\n    }\r\n\r\n    return immutableSquares\r\n}\r\n\r\nfunction getNode2(mutable,row1,row2,col1,col2,squareRow,squareCol) {\r\n    if (!mutable[row2][col2]){\r\n        return getNode2(mutable, row1, getRandomInt(3)+squareRow, col1, getRandomInt(3)+squareCol, squareRow,squareCol)\r\n    }\r\n    else{\r\n        if (row1 === row2 && col1 === col2) {\r\n            return getNode2(mutable, row1, getRandomInt(3)+squareRow, col1, getRandomInt(3)+squareCol, squareRow,squareCol)\r\n        }\r\n        else{\r\n            console.log(row1,row2,col1,col2)\r\n            return {row2,col2}\r\n        }\r\n    }\r\n}\r\n\r\nfunction move (grid, mutable,T,moves, immutableSquares) {\r\n    //pick a random square\r\n    let squareRow = 3*getRandomInt(3)\r\n    let squareCol = 3*getRandomInt(3)\r\n    //to handle case where a full square in immutable\r\n    for (let i = 0; i < immutableSquares.length; i++){\r\n        while (squareRow === immutableSquares[i][0] && squareCol === immutableSquares[i][1]){\r\n            squareRow = 3*getRandomInt(3)\r\n            squareCol = 3*getRandomInt(3)\r\n        }\r\n    }\r\n\r\n    //pick a random 2 nodes in that square that aren't the same\r\n    let row1 = getRandomInt(3) + squareRow\r\n    let col1 = getRandomInt(3) + squareCol\r\n\r\n    let row2 = getRandomInt(3)+ squareRow\r\n    let col2 = getRandomInt(3)+ squareCol\r\n\r\n    while (!mutable[row1][col1]){\r\n        row1 = getRandomInt(3) + squareRow\r\n        col1 = getRandomInt(3) + squareCol\r\n    }\r\n    \r\n    let node2 = getNode2(mutable,row1,row2,col1,col2,squareRow,squareCol)\r\n    row2 = node2.row2\r\n    col2 = node2.col2\r\n\r\n    let EC = energy(grid)\r\n    if(EC === 0){\r\n        return\r\n    }\r\n\r\n    //swap their values\r\n    let temp = grid[row2][col2]\r\n    grid[row2][col2] = grid[row1][col1]\r\n    grid[row1][col1] = temp\r\n\r\n    let EN = energy(grid)\r\n    //If new energy is less, keep new grid, otherwise switch back\r\n    if (EN < EC) {\r\n        moves.push([row1,col1, grid[row1][col1],EN],[row2,col2,grid[row2][col2],EN])\r\n    }\r\n    else {\r\n        let prob = Math.exp((EC-EN)/T) //prob to stay at new grid\r\n        if (prob < Math.random(0,1)) {\r\n            //switch back\r\n            temp = grid[row2][col2]\r\n            grid[row2][col2] = grid[row1][col1]\r\n            grid[row1][col1] = temp\r\n            //just highlight the squares but don't change the values\r\n            moves.push([row1,col1, grid[row1][col1],EC],[row2,col2,grid[row2][col2],EC])\r\n        }\r\n        else {\r\n            moves.push([row1,col1, grid[row1][col1],EN],[row2,col2,grid[row2][col2],EN])\r\n        }\r\n    }\r\n    // console.log(EN)\r\n}\r\n\r\nfunction solve(grid, moves, mutable) {\r\n    //check if any squares have 8 or 9 immutables\r\n    let immutableSquares = getImmutableSquares(mutable)\r\n    if (immutableSquares.length === 9){\r\n        document.getElementById('Error').innerHTML = 'Trivial solution detected.'\r\n        return\r\n    }\r\n\r\n    //initialize random state with 9x9 squares complete\r\n    fillInZeros(grid)\r\n\r\n    // Do moves and lower the temperature over time\r\n    let Tmax = 10\r\n    let Tmin = 0.1\r\n    for (let T = Tmax; T > Tmin; T = 0.9999*T){\r\n        move(grid,mutable,T,moves, immutableSquares)\r\n        \r\n    }\r\n}\r\n\r\nexport default function simulatedAnnealing (grid) {\r\n    let mutable = []\r\n\r\n    //Prevents the algorithm from changing original node values\r\n    for (let row = 0; row < 9; row ++) {\r\n        let temp = []\r\n        for (let col = 0; col < 9; col ++){\r\n            if (grid[row][col] === 0 || grid[row][col] === '0') {\r\n                temp.push(true)\r\n            }\r\n            else{\r\n                temp.push(false)\r\n            }\r\n        }\r\n        mutable.push(temp)\r\n    }\r\n\r\n    //a list of the moves the algorithm will take\r\n    let moves = []\r\n\r\n    solve(grid,moves, mutable)\r\n\r\n    return moves\r\n}","function Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction NodeVal(row,col) {\r\n    return Number(Node(row,col).value)\r\n}\r\n\r\nfunction showErrors(length) {\r\n    let seen = []\r\n\r\n    setTimeout(() => {\r\n        //check the rows\r\n    for (let row = 0; row < 9; row ++) {\r\n        for (let col = 0; col < 9; col ++) {\r\n            if (seen.includes(NodeVal(row,col))) {\r\n                Node(row,col).className = 'node-finish'\r\n            }\r\n            else {\r\n                seen.push(NodeVal(row,col))\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    //check the columns\r\n    for (let col = 0; col < 9; col ++) {\r\n        for (let row = 0; row < 9; row ++) {\r\n            if (seen.includes(NodeVal(row,col))) {\r\n                Node(row,col).className = 'node-finish'\r\n            }\r\n            else {\r\n                seen.push(NodeVal(row,col))\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    }, 1000*Math.log(Math.pow(length+2,5))+1000)\r\n}\r\n\r\nexport default function visualizeSimulatedAnnealing(moves,changeNodeVal) {\r\n\r\n    //check for completed grid\r\n    if (moves.length === 0){\r\n        return\r\n    }\r\n\r\n    //Set initial Error\r\n    setTimeout(() => {\r\n        document.getElementById('Error').innerHTML = `Error: ${moves[0][3]}`\r\n    }, 100*Math.log(Math.pow(0,5)))\r\n\r\n    for (let i = 2; i < moves.length; i = i+2) {\r\n    \r\n        setTimeout(() => {\r\n            Node(moves[i][0],moves[i][1]).className = 'node-start' //current node that we may or may not change\r\n            Node(moves[i+1][0],moves[i+1][1]).className = 'node-start' // other current node\r\n        }, 1000*Math.log(Math.pow(i,5)))\r\n        setTimeout(() => {\r\n            //Switch values\r\n            Node(moves[i][0],moves[i][1]).value = moves[i][2]\r\n            Node(moves[i+1][0],moves[i+1][1]).value = moves[i+1][2]\r\n            //Update Error\r\n            document.getElementById('Error').innerHTML = `Error: ${moves[i][3]}`\r\n            // changeNodeVal(moves[i][0],moves[i][1],moves[i][2])\r\n            // changeNodeVal(moves[i+1][0],moves[i+1][1],moves[i+1][2])\r\n            Node(moves[i][0],moves[i][1]).className = 'node' //remove color since we move onto the next pair of nodes\r\n            Node(moves[i+1][0],moves[i+1][1]).className = 'node'\r\n            \r\n        }, 1000*Math.log(Math.pow(i+2,5)))\r\n    }\r\n\r\n// This starts off linear but tapers off fast. The first two squares stay yellow for whatever reason\r\n//     setTimeout(() => {\r\n//         Node(moves[i][0],moves[i][1]).className = 'node-start' //color node about to be changed\r\n//         Node(moves[i+1][0],moves[i+1][1]).className = 'node-start'\r\n//         document.getElementById('Error').innerHTML = `Error: ${moves[i-2][3]}`\r\n//     }, (i < 20 ? 1000*i +1000: 18000 + 4000*Math.sqrt(Math.log(i-20))))\r\n//     setTimeout(() => {\r\n//         Node(moves[i][0],moves[i][1]).value = moves[i][2]\r\n//         Node(moves[i+1][0],moves[i+1][1]).value = moves[i+1][2]\r\n//         // changeNodeVal(moves[i][0],moves[i][1],moves[i][2])\r\n//         // changeNodeVal(moves[i+1][0],moves[i+1][1],moves[i+1][2])\r\n//         Node(moves[i][0],moves[i][1]).className = 'node' //remove color from previous node if we back up\r\n//         Node(moves[i+1][0],moves[i+1][1]).className = 'node'\r\n        \r\n//     },  (i < 21 ? 1000*(i+1)+1000 : 18000 + 4000*Math.sqrt(Math.log(i+1-20))))\r\n// }\r\n\r\n    showErrors(moves.length)\r\n}","\r\n\r\nfunction Node(row, col) {\r\n    return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction pushToScreen(grid) {\r\n    for (let row = 0; row < 9; row++){\r\n        for (let col = 0; col <9; col++){\r\n            Node(row,col).value = grid[row][col]\r\n        }\r\n    }\r\n}\r\n\r\nfunction shuffle(array) {\r\n    array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  function removeElement(arrayName,arrayElement)\r\n {\r\n    for (var j = 0; j < arrayName.length; j++) {\r\n        for(var i=0; i<arrayName.length;i++ )\r\n        { \r\n            if(arrayName[i]===arrayElement)\r\n                arrayName.splice(i,1); \r\n        }\r\n    }\r\n  }\r\n\r\n//Fills in grid by rows\r\n// function fillInZeros(grid) {\r\n//     let nums= [1,2,3,4,5,6,7,8,9]\r\n\r\n//     for(let row = 0; row < 9; row++) {\r\n//         for (let col = 0; col < 9; col ++){\r\n//             if (grid[row][col] !== 0) {\r\n//                 nums[grid[row][col] - 1] = 0\r\n//             }\r\n//         }\r\n//         console.log(nums)\r\n//         removeElement(nums,0)\r\n//         console.log(nums)\r\n//         shuffle(nums)\r\n//         for (let col = 0; col < 9; col ++){\r\n//             if (grid[row][col] === 0) {\r\n//                 grid[row][col] = nums.pop()\r\n//             }\r\n//         }\r\n//         nums= [1,2,3,4,5,6,7,8,9]\r\n//     }\r\n// }\r\n\r\n//fills in grid by squares\r\nfunction fillInZeros(grid) {\r\n    let nums= [1,2,3,4,5,6,7,8,9]\r\n    let squareRow = 0\r\n    let squareCol = 0\r\n\r\n    for (let square = 0; square < 9; square++) {\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (grid[row][col] !== 0) {\r\n                    nums[grid[row][col] - 1] = 0\r\n                }\r\n            }\r\n        }\r\n        removeElement(nums,0)\r\n        shuffle(nums)\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (grid[row][col] === 0) {\r\n                    grid[row][col] = nums.pop()\r\n                }\r\n            }\r\n        }\r\n        nums= [1,2,3,4,5,6,7,8,9]\r\n        if (squareCol !== 6) {\r\n            squareCol = squareCol + 3\r\n        }\r\n        else {\r\n            squareCol = 0\r\n            squareRow = squareRow + 3\r\n        }\r\n    }\r\n\r\n    pushToScreen(grid)\r\n}\r\n\r\nfunction energy(grid) {\r\n    let E = 0\r\n    let seen = []\r\n\r\n    //check the rows\r\n    for (let row = 0; row < 9; row ++) {\r\n        for (let col = 0; col < 9; col ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                E = E + 1\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n    //check the columns\r\n    for (let col = 0; col < 9; col ++) {\r\n        for (let row = 0; row < 9; row ++) {\r\n            if (seen.includes(grid[row][col])) {\r\n                E = E + 1\r\n            }\r\n            else {\r\n                seen.push(grid[row][col])\r\n            }\r\n        }\r\n        seen = []\r\n    }\r\n\r\n    return E\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  }\r\n\r\nfunction getImmutableSquares(mutable) {\r\n    let count = 0\r\n    let immutableSquares = []\r\n    let squareRow = 0\r\n    let squareCol = 0\r\n\r\n    for (let square = 0; square < 9; square++) {\r\n        for (let row = squareRow; row<3+squareRow; row++) {\r\n            for (let col = squareCol; col < 3+squareCol; col++) {\r\n                if (!mutable[row][col]){\r\n                    count++\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (count >= 8) {\r\n            immutableSquares.push([squareRow,squareCol])\r\n        }\r\n\r\n        count = 0\r\n\r\n        if (squareCol !== 6) {\r\n            squareCol = squareCol + 3\r\n        }\r\n        else {\r\n            squareCol = 0\r\n            squareRow = squareRow + 3\r\n        }\r\n    }\r\n\r\n    return immutableSquares\r\n}\r\n\r\nfunction getNode2(mutable,row1,row2,col1,col2,squareRow,squareCol) {\r\n    if (!mutable[row2][col2]){\r\n        return getNode2(mutable, row1, getRandomInt(3)+squareRow, col1, getRandomInt(3)+squareCol, squareRow,squareCol)\r\n    }\r\n    else{\r\n        if (row1 === row2 && col1 === col2) {\r\n            return getNode2(mutable, row1, getRandomInt(3)+squareRow, col1, getRandomInt(3)+squareCol, squareRow,squareCol)\r\n        }\r\n        else{\r\n            console.log(row1,row2,col1,col2)\r\n            return {row2,col2}\r\n        }\r\n    }\r\n}\r\n\r\nfunction move (grid, mutable,T,moves, immutableSquares) {\r\n    //pick a random square\r\n    let squareRow = 3*getRandomInt(3)\r\n    let squareCol = 3*getRandomInt(3)\r\n    //to handle case where a full square in immutable\r\n    for (let i = 0; i < immutableSquares.length; i++){\r\n        while (squareRow === immutableSquares[i][0] && squareCol === immutableSquares[i][1]){\r\n            squareRow = 3*getRandomInt(3)\r\n            squareCol = 3*getRandomInt(3)\r\n        }\r\n    }\r\n\r\n    //pick a random 2 nodes in that square that aren't the same\r\n    let row1 = getRandomInt(3) + squareRow\r\n    let col1 = getRandomInt(3) + squareCol\r\n\r\n    let row2 = getRandomInt(3)+ squareRow\r\n    let col2 = getRandomInt(3)+ squareCol\r\n\r\n    while (!mutable[row1][col1]){\r\n        row1 = getRandomInt(3) + squareRow\r\n        col1 = getRandomInt(3) + squareCol\r\n    }\r\n    \r\n    let node2 = getNode2(mutable,row1,row2,col1,col2,squareRow,squareCol)\r\n    row2 = node2.row2\r\n    col2 = node2.col2\r\n\r\n    let EC = energy(grid)\r\n    if(EC === 0){\r\n        return\r\n    }\r\n\r\n    //swap their values\r\n    let temp = grid[row2][col2]\r\n    grid[row2][col2] = grid[row1][col1]\r\n    grid[row1][col1] = temp\r\n\r\n    let EN = energy(grid)\r\n    //If new energy is less, keep new grid\r\n    if (EN < EC) {\r\n        moves.push([row1,col1, grid[row1][col1],EN],[row2,col2,grid[row2][col2],EN])\r\n    }\r\n    else {\r\n        //otherwise swap back to keep original grid\r\n        temp = grid[row2][col2]\r\n        grid[row2][col2] = grid[row1][col1]\r\n        grid[row1][col1] = temp\r\n        //just highlight the squares but don't change the values\r\n        moves.push([row1,col1, grid[row1][col1],EC],[row2,col2,grid[row2][col2],EC])\r\n\r\n    }\r\n    // console.log(EN)\r\n}\r\n\r\nfunction solve(grid, moves, mutable) {\r\n    //check if any squares have 8 or 9 immutables\r\n    let immutableSquares = getImmutableSquares(mutable)\r\n    if (immutableSquares.length === 9){\r\n        document.getElementById('Error').innerHTML = 'Trivial solution detected.'\r\n        return\r\n    }\r\n\r\n    //initialize random state with 9x9 squares complete\r\n    fillInZeros(grid)\r\n\r\n    // Do moves and lower the temperature over time\r\n    let Tmax = 5\r\n    let Tmin = 0.1\r\n    for (let T = Tmax; T > Tmin; T = 0.9999*T){\r\n        move(grid,mutable,T,moves, immutableSquares)\r\n        \r\n    }\r\n}\r\n\r\nexport default function simulatedAnnealing (grid) {\r\n    const mutable = []\r\n\r\n    //Prevents the algorithm from changing original node values\r\n    for (let row = 0; row < 9; row ++) {\r\n        let temp = []\r\n        for (let col = 0; col < 9; col ++){\r\n            if (grid[row][col] === 0 || grid[row][col] === '0') {\r\n                temp.push(true)\r\n            }\r\n            else{\r\n                temp.push(false)\r\n            }\r\n        }\r\n        mutable.push(temp)\r\n    }\r\n\r\n    //a list of the moves the algorithm will take\r\n    let moves = []\r\n\r\n    solve(grid,moves, mutable)\r\n\r\n    return moves\r\n}","function getImmutableSquares(mutable) {\r\n  let count = 0\r\n  let immutableSquares = []\r\n  let squareRow = 0\r\n  let squareCol = 0\r\n\r\n  for (let square = 0; square < 9; square++) {\r\n    for (let row = squareRow; row < 3 + squareRow; row++) {\r\n      for (let col = squareCol; col < 3 + squareCol; col++) {\r\n        if (!mutable[row][col]) {\r\n          count++\r\n        }\r\n      }\r\n    }\r\n\r\n    if (count >= 8) {\r\n      immutableSquares.push([squareRow, squareCol])\r\n    }\r\n\r\n    count = 0\r\n\r\n    if (squareCol !== 6) {\r\n      squareCol = squareCol + 3\r\n    } else {\r\n      squareCol = 0\r\n      squareRow = squareRow + 3\r\n    }\r\n  }\r\n\r\n  return immutableSquares\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * Math.floor(max))\r\n}\r\n\r\nfunction randomGrid(grid, mutable) {\r\n  //copy array because pass by reference and setState are fucking dumb\r\n  let tempGrid = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ]\r\n\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      tempGrid[row][col] = grid[row][col]\r\n    }\r\n  }\r\n\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      if (mutable[row][col]) {\r\n        tempGrid[row][col] = getRandomInt(9) + 1\r\n      }\r\n    }\r\n  }\r\n  return tempGrid\r\n}\r\n\r\nfunction error(grid) {\r\n  let E = 0\r\n  let seen = []\r\n  let squareRow = 0\r\n  let squareCol = 0\r\n\r\n  //check the rows\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      if (seen.includes(grid[row][col])) {\r\n        E = E + 1\r\n      } else {\r\n        seen.push(grid[row][col])\r\n      }\r\n    }\r\n    seen = []\r\n  }\r\n  //check the columns\r\n  for (let col = 0; col < 9; col++) {\r\n    for (let row = 0; row < 9; row++) {\r\n      if (seen.includes(grid[row][col])) {\r\n        E = E + 1\r\n      } else {\r\n        seen.push(grid[row][col])\r\n      }\r\n    }\r\n    seen = []\r\n  }\r\n  //Check the squares\r\n  for (let square = 0; square < 9; square++) {\r\n    for (let row = squareRow; row < 3 + squareRow; row++) {\r\n      for (let col = squareCol; col < 3 + squareCol; col++) {\r\n        if (seen.includes(grid[row][col])) {\r\n          E = E + 1\r\n        } else {\r\n          seen.push(grid[row][col])\r\n        }\r\n      }\r\n    }\r\n    if (squareCol !== 6) {\r\n      squareCol = squareCol + 3\r\n    } else {\r\n      squareCol = 0\r\n      squareRow = squareRow + 3\r\n    }\r\n\r\n    seen = []\r\n  }\r\n\r\n  return E\r\n}\r\n\r\nfunction minimum(array) {\r\n  let min = Infinity\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (array[i] < min) {\r\n      min = array[i]\r\n    }\r\n  }\r\n  return min\r\n}\r\n\r\nfunction solve(grid, moves, mutable) {\r\n  //check if any squares have 8 or 9 immutables\r\n  let immutableSquares = getImmutableSquares(mutable)\r\n  if (immutableSquares.length === 9) {\r\n    document.getElementById(\"Error\").innerHTML = \"Trivial solution detected.\"\r\n    return\r\n  }\r\n\r\n  //Step 1: initialize population\r\n  let Cpopulation = []\r\n  let N = 1000 //population size\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    //create random individual\r\n    Cpopulation.push(randomGrid(grid, mutable))\r\n  }\r\n\r\n  let Ngenerations = 1000\r\n  for (let g = 0; g < Ngenerations; g++) {\r\n    //Step 2: Selection\r\n    //Create reproductive population\r\n    let fitness = []\r\n    let Rpopulation = []\r\n    for (let i = 0; i < N; i++) {\r\n      //evaluate error of each individual\r\n      //add individual to reproductive population according to its error\r\n      fitness.push(216 - error(Cpopulation[i])) //Maximum error is 81*3-9*3 = 216\r\n    }\r\n    // console.log(fitness[0])\r\n\r\n    // //subtract constant from all fitnesses so that the minimum is 1\r\n    let min = minimum(fitness)\r\n    // console.log(min)\r\n    for (let j = 0; j < fitness.length; j++) {\r\n      fitness[j] = fitness[j] - min + 1\r\n    }\r\n\r\n    //make reproductive population based on fitness of individuals\r\n    for (let i = 0; i < N; i++) {\r\n      for (let j = 0; j < fitness[i]; j++) {\r\n        Rpopulation.push(i)\r\n        Rpopulation.push(i)\r\n        Rpopulation.push(i)\r\n      }\r\n    }\r\n\r\n    //Step 3: Reproduction\r\n    //create new population from current reproductive population\r\n    let Npopulation = []\r\n    let parent1 = -1\r\n    let parent2 = -1\r\n    for (let i = 0; i < N; i++) {\r\n      //choose two random parents\r\n      parent1 = Rpopulation[getRandomInt(Rpopulation.length)]\r\n      parent2 = Rpopulation[getRandomInt(Rpopulation.length)]\r\n      while (parent2 === parent1) {\r\n        parent2 = Rpopulation[getRandomInt(Rpopulation.length)]\r\n      }\r\n\r\n      // mix their info\r\n      let tempGrid = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      ]\r\n\r\n      for (let row = 0; row < 9; row++) {\r\n        for (let col = 0; col < 9; col++) {\r\n          if (mutable[row][col]) {\r\n            if (Math.random() > 0.5) {\r\n              tempGrid[row][col] = Cpopulation[parent1][row][col]\r\n            } else {\r\n              tempGrid[row][col] = Cpopulation[parent2][row][col]\r\n            }\r\n          } else {\r\n            tempGrid[row][col] = grid[row][col]\r\n          }\r\n        }\r\n      }\r\n\r\n      // mutate\r\n      for (let row = 0; row < 9; row++) {\r\n        for (let col = 0; col < 9; col++) {\r\n          if (mutable[row][col]) {\r\n            if (Math.random() < 0.01 - 0.00001 * g) {\r\n              tempGrid[row][col] = getRandomInt(9) + 1\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      //add new child to new population\r\n      Npopulation.push(tempGrid)\r\n    }\r\n\r\n    //Finished making new generation. Set new population to current population and do next generation\r\n    moves.push(Cpopulation[0])\r\n    Cpopulation = Npopulation\r\n  }\r\n}\r\n\r\nexport default function geneticAlgorithm(grid) {\r\n  let mutable = []\r\n\r\n  //Prevents the algorithm from changing original node values\r\n  for (let row = 0; row < 9; row++) {\r\n    let temp = []\r\n    for (let col = 0; col < 9; col++) {\r\n      if (grid[row][col] === 0 || grid[row][col] === \"0\") {\r\n        temp.push(true)\r\n      } else {\r\n        temp.push(false)\r\n      }\r\n    }\r\n    mutable.push(temp)\r\n  }\r\n\r\n  //a list of the moves the algorithm will take\r\n  let moves = []\r\n\r\n  solve(grid, moves, mutable)\r\n\r\n  return moves\r\n}\r\n","function Node(row, col) {\r\n  return document.getElementById(`node-${row}-${col}`)\r\n} // Gets a node from the screen\r\n\r\nfunction NodeVal(row, col) {\r\n  return Number(Node(row, col).value)\r\n}\r\n\r\nfunction pushToScreen(grid) {\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      Node(row, col).value = grid[row][col]\r\n    }\r\n  }\r\n}\r\n\r\nfunction showErrors() {\r\n  let Error = 0\r\n  let seen = []\r\n  let squareRow = 0\r\n  let squareCol = 0\r\n\r\n  //check the rows\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      if (seen.includes(NodeVal(row, col))) {\r\n        Node(row, col).className = \"node-finish\"\r\n        Error++\r\n      } else {\r\n        seen.push(NodeVal(row, col))\r\n      }\r\n    }\r\n    seen = []\r\n  }\r\n  //check the columns\r\n  for (let col = 0; col < 9; col++) {\r\n    for (let row = 0; row < 9; row++) {\r\n      if (seen.includes(NodeVal(row, col))) {\r\n        Node(row, col).className = \"node-finish\"\r\n        Error++\r\n      } else {\r\n        seen.push(NodeVal(row, col))\r\n      }\r\n    }\r\n    seen = []\r\n  }\r\n  //Check the squares\r\n  for (let square = 0; square < 9; square++) {\r\n    for (let row = squareRow; row < 3 + squareRow; row++) {\r\n      for (let col = squareCol; col < 3 + squareCol; col++) {\r\n        if (seen.includes(NodeVal(row, col))) {\r\n          Node(row, col).className = \"node-finish\"\r\n          Error++\r\n        } else {\r\n          seen.push(NodeVal(row, col))\r\n        }\r\n      }\r\n    }\r\n    if (squareCol !== 6) {\r\n      squareCol = squareCol + 3\r\n    } else {\r\n      squareCol = 0\r\n      squareRow = squareRow + 3\r\n    }\r\n\r\n    seen = []\r\n  }\r\n\r\n  return Error\r\n}\r\n\r\nfunction clearErrors() {\r\n  for (let row = 0; row < 9; row++) {\r\n    for (let col = 0; col < 9; col++) {\r\n      Node(row, col).className = \"node\"\r\n    }\r\n  }\r\n}\r\n\r\nexport default function visualizeGeneticAlgorithm(moves) {\r\n  // console.log(moves)\r\n  //Show all the moves\r\n  // let error = 0\r\n  for (let i = 0; i < moves.length; i++) {\r\n    // console.log(moves[i])\r\n    setTimeout(() => {\r\n      pushToScreen(moves[i])\r\n      clearErrors()\r\n      let error = showErrors()\r\n      document.getElementById(\"Error\").innerHTML = `Generation: ${\r\n        i + 1\r\n      } <br></br> Error: ${error}`\r\n    }, 5000 * Math.log(i + 1))\r\n  }\r\n}\r\n","import backtracking from './algorithms/backtracking'\r\nimport visualizeBacktracking from './algorithms/visualizeBacktracking.js'\r\nimport simulatedAnnealing from \"./algorithms/simulatedAnnealing\";\r\nimport visualizeSimulatedAnnealing from \"./algorithms/visualizeSimulatedAnnealing\";\r\nimport hillClimbing from \"./algorithms/hillClimbing\";\r\nimport geneticAlgorithm from './algorithms/geneticAlgorithm'\r\nimport visualizeGeneticAlgorithm from './algorithms/visualizeGeneticAlgorithm'\r\n\r\n//This function is bound to App.js so that App may\r\n//call any algorithm and visualize it\r\n\r\nexport default function visualizeAlgorithm(changeNodeVal) {\r\n    let moves = []\r\n    switch(this.state.selectedAlg) {\r\n      case 0:\r\n        console.log(\"No algorithm selected!\")\r\n        break\r\n\r\n      case 1:\r\n        let temp = backtracking(this.state.grid)\r\n        moves = temp.moves\r\n        visualizeBacktracking(moves,temp.solvable)\r\n        break\r\n\r\n      case 2:\r\n        moves = hillClimbing(this.state.grid)\r\n        setTimeout(visualizeSimulatedAnnealing(moves,changeNodeVal),1000)\r\n        break\r\n      \r\n      case 3:\r\n        moves = simulatedAnnealing(this.state.grid)\r\n        setTimeout(visualizeSimulatedAnnealing(moves,changeNodeVal),1000)\r\n        break\r\n\r\n      case 4:\r\n        moves = geneticAlgorithm(this.state.grid)\r\n        visualizeGeneticAlgorithm(moves)\r\n        break\r\n      \r\n      default:\r\n        console.log(\"You selected an algorithm!\")\r\n        break\r\n    }\r\n}","import React from \"react\"\r\nimport Node from \"./PathfindingVisualizer/Node/Node.jsx\"\r\nimport \"./Legend.css\"\r\n\r\nexport default function Legend(props) {\r\n  switch (props.selectedAlg) {\r\n    case 1:\r\n      return (\r\n        <div className=\"Legend\">\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={false} isFinish={false} actualValue={0}></Node> =\r\n            Empty Square\r\n          </div>\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={true} isFinish={false}></Node> = Current Square\r\n          </div>\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={false} isFinish={true}></Node> = Visited Square\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n    case 2:\r\n      return (\r\n        <div className=\"Legend\">\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={false} isFinish={false} actualValue={0}></Node> =\r\n            Empty Square\r\n          </div>\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={true} isFinish={false}></Node> = Current Square\r\n          </div>\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={false} isFinish={true}></Node> = Wrong Value Square\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n    case 3:\r\n      return (\r\n        <div className=\"Legend\">\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={false} isFinish={false} actualValue={0}></Node> =\r\n            Empty Square\r\n          </div>\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={true} isFinish={false}></Node> = Current Square\r\n          </div>\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={false} isFinish={true}></Node> = Wrong Value Square\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n    case 4:\r\n      return (\r\n        <div className=\"Legend\">\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={false} isFinish={false} actualValue={0}></Node> =\r\n            Empty Square\r\n          </div>\r\n          <div className=\"Legend-item\">\r\n            <Node isStart={false} isFinish={true}></Node> = Wrong Value Square\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n    default:\r\n      return <div></div>\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport \"./Error.css\"\r\nimport Legend from \"./Legend.js\"\r\n\r\n// export default function Error(props) {\r\n//   return (\r\n//     <div className={\"ErrorLegend\"}>\r\n//       {props.selectedAlg === 2 ||\r\n//       props.selectedAlg === 3 ||\r\n//       props.selectedAlg === 4 ? (\r\n//         props.selectedAlg === 4 ? (\r\n//           <div className=\"Error\" id=\"Error\">\r\n//             Generation: 0 <br></br>\r\n//             Error: 0\r\n//           </div>\r\n//         ) : (\r\n//           <div className=\"Error\" id=\"Error\">\r\n//             Error: 0\r\n//           </div>\r\n//         )\r\n//       ) : (\r\n//         <div className=\"backtrackHasSolution\" id=\"Error\"></div>\r\n//       )}\r\n//       <Legend selectedAlg={props.selectedAlg}></Legend>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\nexport default function Error(props) {\r\n  let message = \"\"\r\n  switch (props.selectedAlg) {\r\n    case 1:\r\n      break\r\n\r\n    case 2:\r\n    case 3:\r\n      message = \"Error : 0\"\r\n      break\r\n\r\n    case 4:\r\n      message = `Generation: 0 \\n\r\n                Error: 0`\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n  return (\r\n    <div className={\"ErrorLegend\"}>\r\n      <div className=\"Error\" id=\"Error\">\r\n        {message}\r\n      </div>\r\n      <Legend selectedAlg={props.selectedAlg}></Legend>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\nimport Menu from './Menu'\nimport loadGrid from './grids/loadGrid'\nimport loadSGrid from './grids/loadSGrid'\nimport loadRGrid from './grids/loadRGrid.js'\nimport About from './About'\nimport selectAlg from './selectAlg'\nimport visualizeAlgorithm from './visualizeAlgorithm'\nimport Error from './Error'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      selectedAlg: 0\n    };\n    this.visualizeAlgorithm = visualizeAlgorithm.bind(this)\n    this.selectAlg = selectAlg.bind(this)\n    this.inputValueChange = this.inputValueChange.bind(this)\n    this.changeNodeVal = this.changeNodeVal.bind(this)\n  }\n\n  changeNodeVal (row,col,value) {\n    let newGrid = this.state.grid.slice()\n    newGrid[row][col] = value\n    this.setState({\n        grid: newGrid\n      })\n  }\n\n  inputValueChange (row,col,event){\n    let value = event.target.value\n    let numVal = Number(value)\n    \n    if (numVal >= 0 && numVal <= 9){\n      let newGrid = this.state.grid.slice()\n      newGrid[row][col] = numVal\n      this.setState({\n        grid: newGrid\n      })\n    }\n  }\n\n  componentDidMount() {\n    const nodes = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n\n    this.setState({\n      grid: nodes\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className='Header'>Algorithm Visualizer</h1>\n        <Menu\n          selectAlg={this.selectAlg}\n          handleClick={() => this.visualizeAlgorithm(this.changeNodeVal)}\n          loadSGrid={() => {\n            this.setState({grid: loadSGrid()}, () => loadGrid(this.state.grid))}}\n          loadRGrid={() => {\n            this.setState({grid: loadRGrid()}, () => loadGrid(this.state.grid))}}\n        ></Menu>\n        <div className='flexbox'>\n          <About selectedAlg={this.state.selectedAlg}></About>\n          <PathfindingVisualizer inputValueChange={this.inputValueChange} grid={this.state.grid} ></PathfindingVisualizer>\n          <Error selectedAlg={this.state.selectedAlg}></Error>\n        </div>\n        <h3>p.s. I love you :heart:</h3>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}